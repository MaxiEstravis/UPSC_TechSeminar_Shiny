---
title: "Shiny basics"
author: "Maxi Estravis"
date: 2024-05-29
format:
  revealjs:
    logo: UPSC Logo_white outlines_colored leaves_short.png
    footer: "Tech Seminar May 2024"
    css: logo.css
    chalkboard: true
    theme: moon
    auto-stretch: false
    smaller: true
---

## What is Shiny?
:::: {.columns}

::: {.column width="60%"}
::: {.incremental}
- R package for creating web apps and interactive documents
- [Basic examples](https://shiny.posit.co/r/gallery/)
- Concept of **reactivity**
:::
:::

::: {.column width="40%"}
![](shiny.png){width="90%"}
:::

::::


## Basic structure

```{.r}
library("shiny")
ui <- fluidPage()
server <- function(input,output) {}
shinyApp(ui=ui,server=server)
```

::: {.incremental}
- `ui` function ("Front-end")
  - Controls the layout and appearance of the app
  - Sets up both inputs and outputs
- `server` function ("Back-end")
  - Instructions for processing inputs and generating outputs
- `shinyApp` call
  - Creates the app from the `ui` / `server` pair
:::

::: {.notes}
This is the "single file" approach. `ui` and `server` could also be two separate R files in a directory.

Also, the `ui` and `server` can be defined in the `shinyApp` call itself, for example in `examples/01_output-types.r`
:::

## Different input types

See `examples/00_input-types.r`

```{.r}
ui=fluidPage(
  titlePanel("Example - Different input types"),
  sidebarLayout(
    sidebarPanel(
             fileInput("file-input", label="File Input"),
             selectInput("select-input", label="Select Input", choices=c("A","B","C")),
             numericInput("numeric-input",label="Numeric Input", value=5, min=1, max=10),
             sliderInput("slider-input", label="Slider Input", value=5, min=1, max=10),
             textInput("text-input", label="Text Input"),
             textAreaInput("text-area-input", label="Text Area Input"),
             dateInput("date-input", label="Date Input"),
             dateRangeInput("date-range-input", label="Date Range Input"),
             radioButtons("radio-button", label="Radio Buttons", choices=c("A","B","C"), inline=T),
             checkboxInput("checkbox", label="Checkbox Input", value=FALSE),
             actionButton("action-button","Action Button")),
    mainPanel()
  ))

server=function(input,output) {}

shinyApp(ui=ui,server=server)
```

::: {.notes}
Built-in input widgets. Each one has a name, quoted in this first definition, followed by other arguments.

Some typical arguments: label (what the user sees), default values.

In the `server` function, these inputs are called by name without quoting.
:::

## Different output types and basic reactivity

See `examples/01_output-types.r`

```{.r}
library("shiny")

shinyApp(
  ui=fluidPage(
    titlePanel("Example - Different output types"),
    sidebarLayout(
      sidebarPanel(
        textInput("text_input",
                  label="Text input", 
                  value="Type text here"),
        selectInput("select_align", 
                    label="Select column alignment", 
                    choices=c("l","c","r"))
      ),
      mainPanel(
        verbatimTextOutput("verbatim_text_output"),
        tableOutput("table_output"),
        plotOutput("plot_output",width="400px",height="400px")))),
  server=function(input, output) {
    output$verbatim_text_output <- renderText({input$text_input})
    output$table_output <- renderTable({mtcars[1:10,1:6]}, 
                                        align = reactive({input$select_align}), 
                                        width = "200%")
    output$plot_output <- renderPlot({plot(mtcars[,1],mtcars[,6], main = input$text_input)}, 
                                     width = 1000)
  })
```

::: {.notes}
As with the inputs, there are pre-built widgets for outputs. Also, they have a name by which they are referred to later, in the `server` function.
:::

## Basic reactivity

Excerpt from `examples/01_output-types.r`

```{.r}
output$table_output <- renderTable(
      {mtcars[1:10,1:6]}, 
      align = reactive({input$select_align}), 
      width = "200%")

output$plot_output <- renderPlot(
      {plot(mtcars[,1],mtcars[,6], main = input$text_output)}, 
      width = 1000)
```

::: {.incremental}
- `render*()` functions take an expression (in `{}`) and other arguments
- The expression in curly brackets is what's going to be rendered (a valid table for `renderTable()`, a valid plot for `renderPlot()`, etc)
- The other arguments, outside curly brackets, deal with the aspect properties of the object
:::


## Basic reactivity

Excerpt from `examples/01_output-types.r`

```{.r code-line-numbers="3"}
output$table_output <- renderTable(
      {mtcars[1:10,1:6]}, 
      align = reactive({input$select_align}), 
      width = "200%")
```

::: {.incremental}
- `reactive()` expressions are calculated each time a widget input is changed
- Same as the `render*` functions, they take an expression in curly brackets, plus optional arguments
:::

::: {.notes}
Let's focus on this line.
:::


## Resources: Everything I know about Shiny

::: {.incremental}
- [RaukR summer school](https://nbisweden.github.io/raukr-2024/) by NBIS and SciLife Lab
- [Mastering Shiny](https://mastering-shiny.org/index.html) by *the man himself*, Hadley Wickham
- [Posit's Shiny tutorial](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html)
- Stack Overflow
- ChatGPT
:::

::: {.fragment}
![](end.png){width="50%" fig-align="center"}
:::
